import { Application } from "../../application/application.ts";
import { Snowflake } from "../../base.ts";
import { GuildMember } from "../../guild/guild_member.ts";
import { User } from "../../user/user.ts";
import { Attachment } from "./attachment.ts";
import { Channel, TebamiThread } from "./../channel.ts";
import { ChannelMention } from "./channel_mention.ts";
import { Embed } from "./embeds/embed.ts";
import { MessageTypes } from "./message_types.ts";
import { Reaction } from "./reaction.ts";
import { MessageActivity } from "./message_activity.ts";
import { MessageReference } from "./message_reference.ts";
import { MessageFlags } from "./message_flags.ts";
import { MessageInteraction } from "../../interactions/message_interaction.ts";
import { StickerItem } from "../../sticker/sticker_item.ts";
import { Component } from "../../interactions/message_components/component.ts";

/**
 * https://discord.com/developers/docs/resources/channel#message-object-message-structure
 */
export interface Message {
  /** Id of the message. */
  id: Snowflake;
  /** Id of the channel the message was sent in. */
  channelId: Snowflake;
  /** Id of the guild the message was sent in. */
  guildId: Snowflake;
  /** The author of this message (not guaranteed to be a valid user, see below) */
  author: User;
  /** Member properties for this message's author. */
  member?: Omit<GuildMember, "user">;
  /** Contents of the message. */
  content: string;
  /** When this message was sent. */
  timestamp: number;
  /** When this message was edited (or null if never). */
  editedTimestamp: number | null;
  /** Whether this was a TTS message. */
  tts: boolean;
  /** Whether this message mentions everyone. */
  mentionEveryone: boolean;
  /** Users specifically mentioned in the message. */
  mentions: (User & { member: Omit<GuildMember, "user"> })[];
  /** Roles specifically mentioned in the message. */
  mentionRoles: Snowflake[];
  /** Channels specifically mentioned in the message. */
  mentionChannels?: ChannelMention[];
  /** Any attached files. */
  attachments: Attachment[];
  /** Any embedded content. */
  embeds: Embed[];
  /** Reactions to the message. */
  reactions?: Reaction[];
  /** Used for validating a message was sent. */
  nonce?: number | string;
  /** Whether this message is pinned. */
  pinned: boolean;
  /** If the message is generated by a webhook, this is the webhook's id. */
  webhookId?: Snowflake;
  /** [Type of Message](https://discord.com/developers/docs/resources/channel#message-object-message-types). */
  type: MessageTypes;
  /** Sent with Rich Presence-related chat embeds. */
  activity?: MessageActivity;
  /** Sent with Rich Presence-related chat embeds. */
  application?: Partial<Application>;
  /** If the message is a repsonnse to an [Interaction](https://discord.com/developers/docs/interactions/slash-commands), this is the Id of the interaction's application. */
  applicationId?: Snowflake;
  /** Data showing the source of a crosspost, channel follow add, pin or reply message. */
  messageReference?: MessageReference;
  /** [Message flags](https://discord.com/developers/docs/resources/channel#message-object-message-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field). */
  flags: MessageFlags;
  /** The message associated with the messageReference. */
  referencedMessage?: Message | null;
  /** Sent if the essage is a response to an [Interaction](https://discord.com/developers/docs/interactions/slash-commands). */
  interaction?: MessageInteraction;
  /** The thread that was started from this message, includes [Thread Member](https://discord.com/developers/docs/resources/channel#thread-member-object) object. */
  thread?: TebamiThread;
  /** Sent if the message contains components like buttons, action rows or other interactive components. */
  components?: Component[];
  /** Sent if the message contains stickers. */
  stickerItem?: StickerItem[];
}
